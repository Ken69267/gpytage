#!/usr/bin/env python
#
# gpytage v0.1 released under the GPLv2 License
#
############################################################################
#    Copyright (C) 2007 by Kenneth Prugh   #
#    ken69267@gmail.com   #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation under version 2 of the License.          #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
import pygtk
import gtk
import os.path

class gpytage:
	def __init__(self):
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("GPytage")
		
		self.datastore = gtk.TreeStore(str, str)
		self.files = ['package.keywords', 'package.unmask', 'package.mask', 'package.use']
		self.create_treeiter() #create the main rows
		#self.button = gtk.Button("Hello World")
		#self.window.add(self.button)
		#self.button.show()
		self.window.show()

		
	def folder_scan(self):
		dirs = []
		file = []
		for i in self.files:
			print i
			result = os.path.isdir("/etc/testportage/"+i)
			if(result):
				print "Dir True"
				dirs.append(i)
			else:
				print "False"
				file.append(i)
		print dirs,file
		return dirs, file

	def folder_walk(self,dirs):#returns list of files within dirs
		dir_files = {} #we need to return the directory scanned and the files it contains.. maybe create a dictionary for them?
		for i in dirs:
			listvalue = [] #package.foo = [files]
			for x in os.listdir("/etc/testportage/"+i+"/"):#x are files inside dir
				listvalue.append(x)
			dir_files[i] = listvalue
		print "Here comes the dictionary!"
		for key in dir_files:
			print key +":"+ str(dir_files[key])
		return dir_files #dictionary of dir name:list of files within
	
	def create_treeiter(self):#create the parent/main rows
		parent_folder, simple_files = self.folder_scan()
		parent_files = self.folder_walk(parent_folder)
		for i in simple_files: #needs no sub main rows just data
			name = i.partition('.')[2]
			siter = name+"_iter"
			print siter
			siter = self.datastore.append(None, [name, None])
			print siter
	def main(self):
		gtk.main()

if __name__ == "__main__":
	gpytage = gpytage()
	gpytage.main()
