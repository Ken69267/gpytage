#!/usr/bin/env python
#
# gpytage v0.1 released under the GPLv2 License
#
############################################################################
#    Copyright (C) 2007 by Kenneth Prugh   #
#    ken69267@gmail.com   #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation under version 2 of the License.          #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
import pygtk
import gtk
import os.path

class gpytage:
	def __init__(self):
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("GPytage")
		self.window.set_default_size(600, 300)

		self.window.connect("destroy", self.destroy)
		self.window.connect("delete_event", self.delete_event)

		self.datastore = gtk.TreeStore(str, str)
		self.files = ['package.keywords', 'package.unmask', 'package.mask', 'package.use']
		self.create_treeiter() #create the main rows

		self.treeview = gtk.TreeView(self.datastore) #create the container

		#self.setup_treeview() #configure everything needed
		#columns
		self.namecol = gtk.TreeViewColumn('Package File')
		self.testcol = gtk.TreeViewColumn('Flag')
		#add to tree
		self.treeview.append_column(self.namecol)
		self.treeview.append_column(self.testcol)
		#render cell
		self.cell = gtk.CellRendererText()
		#add col to cell
		self.namecol.pack_start(self.cell, True)
		self.namecol.set_attributes(self.cell, text=0)
		self.testcol.pack_start(self.cell, True)
		self.testcol.set_attributes(self.cell, text=1)

		self.scroll = gtk.ScrolledWindow()
		self.scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		self.scroll.add_with_viewport(self.treeview)
		self.window.add(self.scroll)
#		self.window.add(self.treeview)
		self.window.show_all()

	def destroy(self, widget, data=None):
		gtk.main_quit()

	def delete_event(self, widget, event, data=None):
		return False

		
	def folder_scan(self):#returns what files are files/dirs wrt portage
		dirs = []
		file = []
		for i in self.files:
			print i
			result = os.path.isdir("/etc/testportage/"+i)
			if(result):
				print "Dir True"
				dirs.append(i)
			else:
				print "False"
				file.append(i)
		print dirs,file
		return dirs, file

	def folder_walk(self,dir):#returns list of files within dirs
		dir_files = []
		for i in os.listdir('/etc/testportage/'+dir+'/'):
			print 'folder walk results'
			print i
			dir_files.append(i)
		return dir_files
		#dir_files = {} #we need to return the directory scanned and the files it contains.. maybe create a dictionary for them?
		#for i in dirs:
		#	listvalue = [] #package.foo = [files]
	#		for x in os.listdir("/etc/testportage/"+i+"/"):#x are files inside dir
	#			listvalue.append(x)
	#		dir_files[i] = listvalue
	#	print "Here comes the dictionary!"
	#	for key in dir_files:
	#		print key +":"+ str(dir_files[key])
	#	return dir_files #dictionary of dir name:list of files within

	
	def create_treeiter(self):#create the parent/main rows
		parent_folder, simple_files = self.folder_scan()
		#parent_files = self.folder_walk(parent_folder)
		for i in simple_files: #needs no sub main rows just data
			name = i.partition('.')[2]
			siter = name+"_iter"
			#print siter
			siter = self.datastore.append(None, [name, None])
			#print siter
			data = self.scan_contents(i)
			print 'file to be scanned'
			print i
			for row in data:
				#print 'data row'
				#print row
				col1 = row[0]
				try:
					#print row[1]
					col2 = row[1] # not all files have 2 cols
				except:
					col2 = None
				self.datastore.append(siter, [col1,col2])
		for i in parent_folder: #parent_folders is list of folders such as package.keywords
			#i is a dir such as package.keywords
			pfolder = i
			name = i.partition('.')[2]
			giter = name+"_iter"
			giter = self.datastore.append(None, [name, None])
			complex_files = self.folder_walk(i) #this needs to return list files in dir
			for i in complex_files: #"simple files"
				name = i #folder name being iterated
				gciter = name+"_iter"
				gciter = self.datastore.append(giter, [name, None])
				dir_file_path = pfolder+'/'+i
				data = self.scan_contents(dir_file_path)
				for row in data:
					col1 = row[0]
					try:
						col2 = row[1]
					except:
						col2 = None
					self.datastore.append(gciter, [col1,col2])

	#def chunks(self, seq, size):
	#	print [seq[i:i+size] for i in xrange(0, len(seq), size)]
					
	def scan_contents(self,arg):#returns data in specified file
		f=open("/etc/testportage/"+arg, 'r')
		contents = f.readlines()
		f.close()
		print contents
		data = [] #list of list: eg [['python','x86']]
		for i in contents:
			print i
			if i.startswith('#'): #don't split if its a comment
				new = [i, None]
			else:
				new = i.split(None,1)
			data.append(new)
		print 'data return from scan'
		print data
		return data #return the master list of lists

	def main(self):
		gtk.main()

if __name__ == "__main__":
	gpytage = gpytage()
	gpytage.main()
