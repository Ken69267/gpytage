#!/usr/bin/env python
#
# GPytage v0.2 Beta released under the GPLv2 License
# GPytage is a utility that helps manage portage's package.* files
#
############################################################################
#    Copyright (C) 2007 by Kenneth Prugh                                   #
#    ken69267@gmail.com                                                    #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation under version 2 of the license.          #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
import pygtk; pygtk.require("2.0")
import gtk
import os.path
import sys
import save
from window import title, window
import leftpanel
import rightpanel
from panelfunctions import selected

class gpytage:
	def __init__(self):
		self.window = window
		title("GPytage")
		self.window.set_default_size(600, 300)
		import datastore
		self.datastore = datastore.datastore

		self.files = datastore.config_files
		
		datastore.create_lists()
		datastore.create_treeiter() #populate the left panel

		###########UIManager#############################
		self.uimanager = gtk.UIManager()
		self.accelgroup = self.uimanager.get_accel_group()
		self.actiongroup = gtk.ActionGroup('GPytage')
		##UI XML
		self.ui = '''
		<ui>
			<menubar name="MenuBar">
				<menu action="File">
					<menuitem action="New" />
					<menuitem action="Save" />
					<menuitem action="Revert" />
					<menuitem action="Quit" />
				</menu>
				<menu action="Edit">
					<menuitem action="Expand All" />
					<menuitem action="Collapse All" />
					<menuitem action="Insert Package" />
					<menuitem action="Delete Package" />
				</menu>
				<menu action="Help">
					<menuitem action="About" />
				</menu>
			</menubar>
		</ui>'''
		##

		#Actions
		self.actiongroup.add_actions([
			('Quit', gtk.STOCK_QUIT, '_Quit', None, 'Quit GPytage', self.destroy),
			('Revert', gtk.STOCK_REVERT_TO_SAVED, '_Revert', None, 'Revert changes', self.reload),
			('New', gtk.STOCK_NEW, '_New Subfile', '<Control>n', 'New file', self.new),
			('File', None, '_File'),
			('Save', gtk.STOCK_SAVE, '_Save', '<Control>s', 'Save changes', self.save),
			('Edit', None, '_Edit'),
			('Expand All', None, '_Expand All', '<Control>backslash', 'Expand Rows', self.expand),
			('Collapse All', None, '_Collapse All', '<Control>slash', 'Collapse Rows', self.collapse),
			('Insert Package', None, '_Insert Package', '<Control>t', 'Add a package', rightpanel.insertrow),
			('Delete Package', None, '_Delete Package', 'Delete', "Delete a package", rightpanel.deleterow),
			('Help',None,'_Help'),
			('About', gtk.STOCK_ABOUT, '_About', None, 'About GPytage', self.about)])

		#Add the UI XML
		self.uimanager.insert_action_group(self.actiongroup, 0)
		self.uimanager.add_ui_from_string(self.ui)

		#Menubar
		self.menubar = self.uimanager.get_widget('/MenuBar')
		self.vbox = gtk.VBox() #the master widgit
		self.vbox.pack_start(self.menubar, False)
		
		################Connections##################
		#allow the program to quit
		self.window.connect("destroy", self.destroy)
		self.window.connect("delete_event", self.delete_event)

		###########Show Widgits######################
		#self.phbox = gtk.HBox(homogeneous=False, spacing=5)
		#self.phbox.pack_start(leftpanel.scroll, True, True, 0)
		#self.phbox.pack_start(rightpanel.scroll, True, True, 0)
		#self.vbox.pack_start(self.phbox)
		self.pane = gtk.HPaned()
		self.pane.pack1(leftpanel.scroll, True, True)
		self.pane.pack2(rightpanel.scroll, True, True)
		self.pane.set_position(200)
		self.vbox.pack_start(self.pane)
		self.window.add_accel_group(self.accelgroup)
		self.window.add(self.vbox)
		self.window.show_all()

	############Signal Functions###########################
	def destroy(self, widget, data=None):
		gtk.main_quit()

	def delete_event(self, widget, event, data=None):
		return False

	############Menu Functions. ###########################
	def about(self, arg): #wth is arg
		aboutw = gtk.AboutDialog()
		aboutw.set_name('GPytage')
		aboutw.set_copyright('Copyright 2007, GPL2')
		aboutw.set_authors(['Kenneth Prugh', '\nWith special thanks to the Gentoo \ndevelopers and community', '\nLicensed under the GPL-2'])
		f=open('/usr/portage/licenses/GPL-2')
		gpl2 = f.read()
		f.close
		aboutw.set_license(gpl2)
		aboutw.set_wrap_license(True)
		aboutw.set_version('0.1_Alpha')
		aboutw.set_website('https://gna.org/projects/gpytage/')
		aboutw.run()
		aboutw.hide()
	
	def reload(self, arg): #reloads all rows in treeview
		from helper import reload
		reload()

	def expand(self, arg):
		leftpanel.leftview.expand_all()

	def collapse(self, arg):
		leftpanel.leftview.collapse_all()
			
	def save(self, arg):
		save.SaveFile().save()

	def new(self, arg):
		import newfile
		newfile.new(self.window)


	def main(self):
		gtk.main()

if __name__ == "__main__":
	gpytage = gpytage()
	gpytage.main()
