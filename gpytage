#!/usr/bin/env python
#
# GPytage v0.1 released under the GPLv2 License
# GPytage is a utility that helps manage portage's package.* files
#
############################################################################
#    Copyright (C) 2007 by Kenneth Prugh                                   #
#    ken69267@gmail.com                                                    #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation under version 2 of the license.		   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
import pygtk
import gtk
import os.path
import sys
import pdb

class gpytage:
	def __init__(self):
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("GPytage")
		self.window.set_default_size(600, 300)

		self.datastore = gtk.TreeStore(str, str, bool)
		self.files = ['package.keywords', 'package.unmask', 'package.mask', 'package.use']
		self.create_treeiter() #create the main rows

		self.treeview = gtk.TreeView(self.datastore) #create the container

		self.treeview.set_search_column(0) #search broken atm #child?
		self.treeview.set_reorderable(True) # allow inline drag and drop
		#columns
		self.namecol = gtk.TreeViewColumn('Package File')
		self.testcol = gtk.TreeViewColumn('Flags')
		self.boolcol = gtk.TreeViewColumn() #editable col
		#add to tree
		self.treeview.append_column(self.namecol)
		self.treeview.append_column(self.testcol)
		self.treeview.append_column(self.boolcol)
		#render cell
		self.cell = gtk.CellRendererText()
		self.cell1 = gtk.CellRendererText()

		#add cols to cell
		self.namecol.pack_start(self.cell, True)
		self.namecol.set_attributes(self.cell, text=0)
		self.namecol.add_attribute(self.cell, "editable", 2)#set row editable
		self.namecol.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
		self.testcol.pack_start(self.cell1, True)
		self.testcol.set_attributes(self.cell1, text=1)
		self.testcol.add_attribute(self.cell1, "editable", 2)#set row editable
		self.testcol.set_expand(True)
		self.testcol.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)

		###########Scroll Window#########################
		self.scroll = gtk.ScrolledWindow()
		self.scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		self.scroll.add_with_viewport(self.treeview)

		###########UIManager#############################
		self.uimanager = gtk.UIManager()
		self.accelgroup = self.uimanager.get_accel_group()
		self.actiongroup = gtk.ActionGroup('GPytage')
		##UI XML
		self.ui = '''
		<ui>
			<menubar name="MenuBar">
				<menu action="File">
					<menuitem action="New" />
					<menuitem action="Save" />
					<menuitem action="Revert" />
					<menuitem action="Quit" />
				</menu>
				<menu action="Edit">
					<menuitem action="Expand All" />
					<menuitem action="Collapse All" />
				</menu>
				<menu action="Help">
					<menuitem action="About" />
				</menu>
			</menubar>
		</ui>'''
		##

		#Actions #NEEDS FIXING
		self.actiongroup.add_actions([
			('Quit', gtk.STOCK_QUIT, '_Quit', None, 'Quit GPytage', self.destroy),
			('Revert', gtk.STOCK_REVERT_TO_SAVED, '_Revert', None, 'Revert changes', self.reload),
			('New', gtk.STOCK_NEW, '_New Subfile', '<Control>n', 'New file', self.new),
			('File', None, '_File'),
			('Save', gtk.STOCK_SAVE, '_Save', '<Control>s', 'Save changes', self.save),
			('Edit', None, '_Edit'),
			('Expand All', None, '_Expand All', None, 'Expand Rows', self.expand),
			('Collapse All', None, '_Collapse All', None, 'Collapse Rows', self.collapse),
			('Help',None,'_Help'),
			('About', gtk.STOCK_ABOUT, '_About', None, 'About GPytage', self.about)])

		#Add the UI XML
		self.uimanager.insert_action_group(self.actiongroup, 0)
		self.uimanager.add_ui_from_string(self.ui)

		#Menubar
		self.menubar = self.uimanager.get_widget('/MenuBar')
		self.vbox = gtk.VBox() #the master widgit
		self.vbox.pack_start(self.menubar, False)
		
		################Connections##################
		#allow the program to quit
		self.window.connect("destroy", self.destroy)
		self.window.connect("delete_event", self.delete_event)
		self.cell.connect("edited", self.edited_cb, self.datastore, 0)
		self.cell1.connect("edited", self.edited_cb, self.datastore, 1)
		self.treeview.connect("button_press_event", self.clicked)
		#############################################

		###########Show Widgits##########################
		self.vbox.pack_start(self.scroll, True, True, 0)
		#self.vbox.pack_start(self.treeview, True)
		self.window.add_accel_group(self.accelgroup)
		#self.window.add_accel_group(self.accelgroup)
		#self.window.add(self.scroll)
		self.window.add(self.vbox)
#		#self.window.add(self.treeview)
		self.window.show_all()

	############Signal Functions###########################
	def destroy(self, widget, data=None):
		gtk.main_quit()

	def delete_event(self, widget, event, data=None):
		return False

	def edited_cb(self, cell, path, new_text, user_data, col):
		self.datastore[path][col] = new_text
		return

	def clicked(self, view, event):
		if event.button == 3:
			menu = gtk.Menu()
			irow = gtk.MenuItem("Insert Package")
			irow.connect("activate", self.insertrow)
			menu.append(irow)
			menu.show_all()
			menu.popup(None, None, None, event.button, event.time)

	############Menu Functions. ###########################
	def about(self, arg): #wth is arg
		aboutw = gtk.AboutDialog()
		aboutw.set_name('GPytage')
		aboutw.set_copyright('Copyright 2007, GPL2')
		aboutw.set_authors(['Kenneth Prugh', '\nWith special thanks to the Gentoo \ndevelopers and community', '\nLicensed under the GPL-2'])
		f=open('/usr/portage/licenses/GPL-2')
		gpl2 = f.read()
		f.close
		aboutw.set_license(gpl2)
		aboutw.set_wrap_license(True)
		aboutw.set_version('0.1')
		aboutw.set_website('http://ken.ath.cx/wiki/index.php/GPytage')
		aboutw.run()
		aboutw.hide()
	
	def reload(self, arg): #reloads all rows in treeview
		self.datastore.clear()
		self.create_treeiter()

	def save(self, arg): #the important one...
		for row in self.datastore: #iters through parents
			file = 'package.'+row[0] #eg: package.keywords
			simlist = [] #uh, write this to file i guess
			for child in row.iterchildren(): #child of parents
				if child[2] == False: #if its false it has subfiles
					subdlist = []
					for cell in child.iterchildren(): #child.iter is subfile
						datarow = self.assemblerow(cell)
						subdlist.append(datarow)
					self.savefile(file, child[0], subdlist)
				else:
					print child #list
					datarow = self.assemblerow(child)
					simlist.append(datarow)
			if simlist != []:
				self.savefile(file, None, simlist)
	#insight: datastore can be thought of a giant list, where row[0] references the first item in a multi list list. eg: foo = [['blah'],['blah1']]

	def new(self, arg):#create a new file :S
		pass

	def expand(self, arg):
		self.treeview.expand_all()

	def collapse(self, arg):
		self.treeview.collapse_all()

	def selected(self): #helper function
		selection = self.treeview.get_selection()
		model, iter = selection.get_selected()
		value = self.datastore.get_value(iter, 2)
		return iter, value


	def insertrow(self, arg):
		iter, value = self.selected()
		if value == True:
			niter = self.datastore.insert_after(None, iter, [None, None, True])
			path = self.datastore.get_path(niter)
			self.treeview.set_cursor_on_cell(path, self.namecol, self.cell, True)

	#######################################################

	def folder_scan(self):#returns what files are files/dirs wrt portage
		dirs = []
		file = []
		for i in self.files:
			print i
			result = os.path.isdir("/etc/testportage/"+i)
			if(result):
				print "Dir True"
				dirs.append(i)
			else:
				print "False"
				file.append(i)
		print dirs,file
		return dirs, file

	def folder_walk(self,dir):#returns list of files within dirs
		dir_files = []
		for i in os.listdir('/etc/testportage/'+dir+'/'):
			print 'folder walk results'
			print i
			dir_files.append(i)
		return dir_files

	
	def create_treeiter(self):#create the parent/main rows
		parent_folder, simple_files = self.folder_scan()
		#parent_files = self.folder_walk(parent_folder)
		for i in simple_files: #needs no sub main rows just data
			name = i.partition('.')[2]
			siter = name+"_iter"
			#print siter
			siter = self.datastore.append(None, [name, None, False])
			#print siter
			data = self.scan_contents(i)
			print 'file to be scanned'
			print i
			for row in data:
				#print 'data row'
				#print row
				col1 = row[0].rstrip() #strips \n
				try:
					#print row[1]
					col2 = row[1].rstrip() # not all files have 2 cols
				except:
					col2 = None
				self.datastore.append(siter, [col1, col2, True])
		for i in parent_folder: #parent_folders is list of folders such as package.keywords
			#i is a dir such as package.keywords
			pfolder = i
			name = i.partition('.')[2]
			giter = name+"_iter"
			giter = self.datastore.append(None, [name, None, False])
			complex_files = self.folder_walk(i) #this needs to return list files in dir
			for i in complex_files: #"simple files"
				name = i #folder name being iterated
				gciter = name+"_iter"
				gciter = self.datastore.append(giter, [name, None, False])
				dir_file_path = pfolder+'/'+i
				data = self.scan_contents(dir_file_path)
				for row in data:
					col1 = row[0].rstrip()
					try:
						col2 = row[1].rstrip()
					except:
						col2 = None
					self.datastore.append(gciter, [col1,col2, True])

					
	def scan_contents(self,arg):#returns data in specified file
		try:
			f=open("/etc/testportage/"+arg, 'r')
			contents = f.readlines()
			f.close()
		except IOError: #needed or everything breaks
			print 'Warning: Critical file /etc/%s not found, creating...' % arg
			writemessage = '''# This file was created by GPytage as it is required for proper operation.'''
			f=open("/etc/testportage/"+arg, 'w')
			f.write(writemessage)
			f.close

		print contents
		data = [] #list of list: eg [['python','x86']]
		for i in contents:
			print i
			if i.startswith('#'): #don't split if its a comment
				new = [i, None]
			else:
				new = i.split(None,1)
			data.append(new)
		print 'data return from scan'
		print data
		return data #return the master list of lists

	def assemblerow(self, child):
		try:
			len(child[0])
			text1 = child[0]
		except:
			text1 = ""
		try:
			len(child[1])
			text2 = child[1]
		except:
			text2 = ""
		datarow = text1 + " " + text2 + '\n'
		print datarow
		print 'yay data'
		return datarow

	def savefile(self, package, subfile, rowlist):
		if subfile is None:
			try:
				f=open('/etc/testportage/'+package, 'w')
			except IOError:
				print 'Failed to open /etc/testportage/' + package + ' for write access'
				#sys.exit()
			for row in rowlist:
				f.write(row)
			f.close
		else:
			try:
				f=open('/etc/testportage/'+package+'/'+subfile, 'w')
			except IOError:
				print 'failed to open /etc/testportage/'+package+'/'+subfile + ' for write access'
			for row in rowlist:
				f.write(row)
			f.close
		print "jingle berries we've got it, I have saved"

	def main(self):
		gtk.main()

if __name__ == "__main__":
	gpytage = gpytage()
	gpytage.main()
