#!/usr/bin/env python
#
# GPytage v0.1_Alpha released under the GPLv2 License
# GPytage is a utility that helps manage portage's package.* files
#
############################################################################
#    Copyright (C) 2007 by Kenneth Prugh                                   #
#    ken69267@gmail.com                                                    #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation under version 2 of the license.          #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################
import pygtk; pygtk.require("2.0")
import gtk
import os.path
import sys
import pdb
import save

class gpytage:
	def __init__(self):
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("GPytage")
		self.window.set_default_size(600, 300)
		import datastore
		self.datastore = datastore.datastore

		self.files = ['package.keywords', 'package.unmask', 'package.mask', 'package.use']
		datastore.create_treeiter() #create the main rows

		self.treeview = gtk.TreeView(self.datastore) #create the container

		self.treeview.set_search_column(0) #search broken atm #child?
		self.treeview.set_reorderable(True) # allow inline drag and drop
		#columns
		self.namecol = gtk.TreeViewColumn('Package File')
		self.testcol = gtk.TreeViewColumn('Flags')
		self.boolcol = gtk.TreeViewColumn() #editable col
		#add to tree
		self.treeview.append_column(self.namecol)
		self.treeview.append_column(self.testcol)
		self.treeview.append_column(self.boolcol)
		#render cell
		self.cell = gtk.CellRendererText()
		self.cell1 = gtk.CellRendererText()

		#add cols to cell
		self.namecol.pack_start(self.cell, True)
		self.namecol.set_attributes(self.cell, text=0)
		self.namecol.add_attribute(self.cell, "editable", 2)#set row editable
		self.namecol.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
		self.testcol.pack_start(self.cell1, True)
		self.testcol.set_attributes(self.cell1, text=1)
		self.testcol.add_attribute(self.cell1, "editable", 2)#set row editable
		self.testcol.set_expand(True)
		self.testcol.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)

		###########Scroll Window#########################
		self.scroll = gtk.ScrolledWindow()
		self.scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		self.scroll.add_with_viewport(self.treeview)

		###########UIManager#############################
		self.uimanager = gtk.UIManager()
		self.accelgroup = self.uimanager.get_accel_group()
		self.actiongroup = gtk.ActionGroup('GPytage')
		##UI XML
		self.ui = '''
		<ui>
			<menubar name="MenuBar">
				<menu action="File">
					<menuitem action="New" />
					<menuitem action="Save" />
					<menuitem action="Revert" />
					<menuitem action="Quit" />
				</menu>
				<menu action="Edit">
					<menuitem action="Expand All" />
					<menuitem action="Collapse All" />
					<menuitem action="Insert Package" />
					<menuitem action="Delete Package" />
				</menu>
				<menu action="Help">
					<menuitem action="About" />
				</menu>
			</menubar>
		</ui>'''
		##

		#Actions #NEEDS FIXING
		self.actiongroup.add_actions([
			('Quit', gtk.STOCK_QUIT, '_Quit', None, 'Quit GPytage', self.destroy),
			('Revert', gtk.STOCK_REVERT_TO_SAVED, '_Revert', None, 'Revert changes', self.reload),
			('New', gtk.STOCK_NEW, '_New Subfile', '<Control>n', 'New file', self.new),
			('File', None, '_File'),
			('Save', gtk.STOCK_SAVE, '_Save', '<Control>s', 'Save changes', self.save),
			('Edit', None, '_Edit'),
			('Expand All', None, '_Expand All', '<Control>backslash', 'Expand Rows', self.expand),
			('Collapse All', None, '_Collapse All', '<Control>slash', 'Collapse Rows', self.collapse),
			('Insert Package', None, '_Insert Package', '<Control>t', 'Add a package', self.insertrow),
			('Delete Package', None, '_Delete Package', 'Delete', "Delete a package", self.deleterow),
			('Help',None,'_Help'),
			('About', gtk.STOCK_ABOUT, '_About', None, 'About GPytage', self.about)])

		#Add the UI XML
		self.uimanager.insert_action_group(self.actiongroup, 0)
		self.uimanager.add_ui_from_string(self.ui)

		#Menubar
		self.menubar = self.uimanager.get_widget('/MenuBar')
		self.vbox = gtk.VBox() #the master widgit
		self.vbox.pack_start(self.menubar, False)
		
		################Connections##################
		#allow the program to quit
		self.window.connect("destroy", self.destroy)
		self.window.connect("delete_event", self.delete_event)
		self.cell.connect("edited", self.edited_cb, self.datastore, 0)
		self.cell1.connect("edited", self.edited_cb, self.datastore, 1)
		self.treeview.connect("button_press_event", self.clicked)
		#############################################
		
		############Drag and Drop####################
		self.treeview.enable_model_drag_source(gtk.gdk.BUTTON1_MASK, [('text/plain', 0, 0)], gtk.gdk.ACTION_DEFAULT | gtk.gdk.ACTION_MOVE)
		self.treeview.enable_model_drag_dest([('text/plain', 0, 0)], gtk.gdk.ACTION_DEFAULT)

		self.treeview.connect("drag_data_get", self.get_dragdata)
		self.treeview.connect("drag_data_received", self.get_dragdestdata)

		###########Show Widgits######################
		self.vbox.pack_start(self.scroll, True, True, 0)
		self.window.add_accel_group(self.accelgroup)
		self.window.add(self.vbox)
		self.window.show_all()

	############Signal Functions###########################
	def destroy(self, widget, data=None):
		gtk.main_quit()

	def delete_event(self, widget, event, data=None):
		return False

	def edited_cb(self, cell, path, new_text, user_data, col):
		self.datastore[path][col] = new_text
		self.window.set_title("* GPytage")
		return

	def clicked(self, view, event):
		if event.button == 3:
			menu = gtk.Menu()
			irow = gtk.MenuItem("Insert Package")
			irow.connect("activate", self.insertrow)
			drow = gtk.MenuItem("Delete Package")
			drow.connect("activate", self.deleterow)
			menu.append(irow)
			menu.append(drow)
			menu.show_all()
			menu.popup(None, None, None, event.button, event.time)

	def get_dragdata(self, treeview, context, selection, target_id, etime):
		iter, value = self.selected()
		if value:
			self.data = []
			self.data.append(self.datastore.get_value(iter, 0))
			self.data.append(self.datastore.get_value(iter, 1))
			self.data.append(self.datastore.get_value(iter, 2))
			selection.set(selection.target, 0, str(self.data[0]))
			selection.set(selection.target, 1, str(self.data[1]))
			selection.set(selection.target, 2, str(self.data[2]))
	
	def get_dragdestdata(self, treeview, context, x, y, selection, info, etime):
		iter, value = self.selected()
		if value:
			ldata = self.data
			drop_info = treeview.get_dest_row_at_pos(x,y)
			if drop_info:
				path, position = drop_info
				iteri = self.datastore.get_iter(path)
				if self.datastore.get_value(iteri, 2):
					if (position == gtk.TREE_VIEW_DROP_BEFORE or position == gtk.TREE_VIEW_DROP_INTO_OR_BEFORE):
						self.datastore.insert_before(None, iteri, ldata)
						print 'before'
					else:
						self.datastore.insert_after(None, iteri, ldata)
						print 'after'
				else:
					return
			else:
				self.datastore.append([data])
				print 'else'
			self.window.set_title("* GPytage")
			if context.action == gtk.gdk.ACTION_MOVE:
				context.finish(True, True, etime)
			return

	############Menu Functions. ###########################
	def about(self, arg): #wth is arg
		aboutw = gtk.AboutDialog()
		aboutw.set_name('GPytage')
		aboutw.set_copyright('Copyright 2007, GPL2')
		aboutw.set_authors(['Kenneth Prugh', '\nWith special thanks to the Gentoo \ndevelopers and community', '\nLicensed under the GPL-2'])
		f=open('/usr/portage/licenses/GPL-2')
		gpl2 = f.read()
		f.close
		aboutw.set_license(gpl2)
		aboutw.set_wrap_license(True)
		aboutw.set_version('0.1_Alpha')
		aboutw.set_website('https://gna.org/projects/gpytage/')
		aboutw.run()
		aboutw.hide()
	
	def reload(self, arg): #reloads all rows in treeview
		from helper import reload
		reload(self.window)

	def expand(self, arg):
		self.treeview.expand_all()

	def collapse(self, arg):
		self.treeview.collapse_all()

	def selected(self): #helper function
		selection = self.treeview.get_selection()
		model, iter = selection.get_selected()
		try:
			value = self.datastore.get_value(iter, 2)
		except:
			value = False
		return iter, value

	def insertrow(self, arg):
		iter, value = self.selected()
		if value == True:
			niter = self.datastore.insert_after(None, iter, [None, None, True])
			path = self.datastore.get_path(niter)
			self.treeview.set_cursor_on_cell(path, self.namecol, self.cell, True)
			self.window.set_title("* GPytage")

	def deleterow(self, arg):
		iter, value = self.selected()
		if value == True:
			self.datastore.remove(iter)
			self.window.set_title("* GPytage")
			
	def save(self, arg):
		state = save.save(arg, self.datastore)
		if state:
			self.window.set_title("GPytage")

	def new(self, arg):
		import newfile
		newfile.new(self.window)


	def main(self):
		gtk.main()

if __name__ == "__main__":
	gpytage = gpytage()
	gpytage.main()
